

Command Executor:

todo: use Command string value bug {
    
    use "Hello World"
    print

    only prints Hell
    we need to replace string.split(' ') with something that
    doesnt fuck up the string
}

todo: use Command {

    use Transform Vector3 100 39 0 Vector3 1 Quaternion

    all of the values here is interperated as 
    Transform constructor arguments
    
    fix:
    use Transform (Vector3 (100, 3, 4), Vector3 (1), Quaternion (329, 21, 1, 1))
    
    comma sepperated arguments

}

todo: semicolon syntax {
    commands can get really long. we should be able to have on command on several lines
    how do we sepperate commands from each other?
    fix:
    use semicolon after every command
}

todo: invoke command arguments {
    pass arguments to the invoked function, simular to use command arguments
}

todo: Integer support


Reflection:

<Done> todo: GetObject{super}() {
    should return null if it doesnt find the object
}


Animation libray:

todo: class Curve2D {
    represents a curve on a graph

    api:
    list<value, time>
    float Evaluate(time) {
        return value at time
    }

    would be cool with intuitive chainable api for creating a curve in code
}

todo: class Animation {
    
    things to figure out:

    what needs animating?
     - GameObjects?
     - RenderObjects?

    how do we get animations from blender?

    

}


Assets:

todo: Assets auto loading {
    all assets should be loaded without me telling them to be loaded

    - Shaders <Done>
    - meshes
    - textures
}
<Done> todo: shader assets {
    deffine vertex, fragment etc shaders in one "shaderProgram" file
    so we dont need to use loadShaderAsset(name, vertex, fragment) 

    to figure out:
    can we create PShaders from strings // yes it seem like it
}


General:

todo: file path sepperator {
    find the path sepperator to get correct file paths on both windows, linux, mac
}

<Done> todo: class boolOperator

todo: class QueryList : ArrayList {
    list with Linq like methods

    - Where <Done>
    - Select <Done>
    - Insert <Done>
    - OrderBy
    - Invoke
    - First
}



ObjectSystem:

todo: init gameObject api {

    the Scene.Initialize() functions is all we got.
    new api:
    chainable api to create gameObject in the api

    Draft:
    builder.Create("myGameObj")
        .positioned(<pos>)
        .oriented(<rot>)
        .with(<comp>, <comp>, ...)
        .InitAt(defScene);

        


    class GameObjectBuilder

}

todo: GameObject tags {
    GameObjects should have a String[] field
    for <Tags> 
    with potential query selection
}

todo: GameObject hirarchy {
    GameObjects should be orderd in a hirarchy
}





