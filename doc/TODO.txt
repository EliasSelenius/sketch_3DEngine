


Notes:
platform == MACOSX
surface.setVisible(bool);
void keyTyped()


Command Executor:

todo: use Command string value bug {
    
    use "Hello World"
    print

    only prints Hell
    we need to replace string.split(' ') with something that
    doesnt fuck up the string
}

todo: use Command {

    use Transform Vector3 100 39 0 Vector3 1 Quaternion

    all of the values here is interperated as 
    Transform constructor arguments
    
    fix:
    use Transform (Vector3 (100, 3, 4), Vector3 (1), Quaternion (329, 21, 1, 1))
    
    comma sepperated arguments

}

todo: semicolon syntax {
    commands can get really long. we should be able to have on command on several lines
    how do we sepperate commands from each other?
    fix:
    use semicolon after every command
}

todo: invoke command arguments {
    pass arguments to the invoked function, simular to use command arguments
}

todo: Integer support


Reflection:

<Done> todo: GetObject{super}() {
    should return null if it doesnt find the object
}


Animation libray:

todo: class Curve2D {
    represents a curve on a graph

    api:
    list<value, time>
    float Evaluate(time) {
        return value at time
    }

    would be cool with intuitive chainable api for creating a curve in code
}

todo: class Animation {
    
    things to figure out:

    what needs animating?
     - GameObjects?
     - RenderObjects?

    how do we get animations from blender?

    

}


Assets:

todo: Assets auto loading {
    all assets should be loaded without me telling them to be loaded

    - Shaders <Done> // shader files now have the (.shdp) file extension, shdp = ShaderProgram
    - meshes
    - textures
}
<Done> todo: shader assets {
    deffine vertex, fragment etc shaders in one "shaderProgram" file
    so we dont need to use loadShaderAsset(name, vertex, fragment) 

    to figure out:
    can we create PShaders from strings // yes it seem like it
}



General:

todo: Invoke Functions in threads {
    class Func shuold have a method for invoking it inside a thread
    Events should also be able to run all listeners in one thread 
} 

todo: file path sepperator {
    find the path sepperator to get correct file paths on both windows, linux, mac
}

<Done> todo: class boolOperator

todo: class QueryList : ArrayList {
    list with Linq like methods

    - Where <Done>
    - Select <Done>
    - Insert <Done>
    - OrderBy
    - Invoke
    - First
    - ForEach <Done>
    - SwapIndex <Done>
    
}


todo: boolOperator API {

    - BoolOperator.And() <Done>
    - BoolOperator.Or()
    - BoolOperator.Xor() ??


    - LessThan <Done>
    - GreaterThan <Done>
    - Equal <Done>
    - IsNull <Done>
    - IsNotNull <Done>
    - OfType <Done> does not work with primitives
    - InBetween
    - Like String with wildcards?: '_' '%'

}



ObjectSystem:

todo: init gameObject api {

    the Scene.Initialize() functions is all we got.
    new api:
    chainable api to create gameObject in the api

    Draft:
    builder.Create("myGameObj")
        .positioned(<pos>)
        .oriented(<rot>)
        .with(<comp>, <comp>, ...)
        .InitAt(defScene);

        


    class GameObjectBuilder

}

todo: GameObject tags {
    GameObjects should have a String[] field
    for <Tags> 
    with potential query selection

    example usage:
    all GameObjects that are considerd an enemy of the player has the tag: "Enemy"
    to get all enemys:
    select all gameObjects with the tag "Enemy"
}

todo: GameObject hirarchy {
    GameObjects should be orderd in a hirarchy

    how do we sepperate from local and world space regarding transform
     - 


    Draft {
        GameObject has a refernce to its parent
        or GameObject has a list of refernces to its children

        question is:
         - do we want child gameObjects to be a list in the parent?
         - or de we want all gameObjects to be stored in the Scene, and only have gameObjects refernce eachother 

        with this api we can make "Root gameobjects" because Scene itself has gameObjects but not any parent gameObject
        API: {
            abstract class GameObjectContainer { 
                QueryList<GameObject> gameObjs;
                void Add(GameObject obj) { }
            } 
            class Scene extends GameObjectContainer { }
            class GameObject extends GameObjectContainer { 
                GameObjectContainer Parent;
            }
        }
        also the GameObjectContainer should be where the gameObject instantiation occures

        favored sulotion: {
            Scene is the container of all gameObjects, including child objects
            gameObjects only refer to each other
            E.g:
            GameObject Parent;
            QueryList<GameObject> Children;
        }
    }
}



Serialization:

todo: XMLConverter {
    convert java objects to xml, and xml to objects

    api: 
    XML ToXML(object obj)

    object FromXML(XML xml)
}





User Interface:

todo: Canvas {
    the Canvas class is the base for all UI rendering

}


<Done> todo: Figure out render method {
    
    how do we get all UI rendered on the screen and not in the World

    Camera.Buffer can be directly rendered to

    soluton { 
        do Not use DisplayBuffer,
        DisplayBuffer has been renamed to WorldGraphics to avoid confusion

        there is a new UIGraphics that can be drawn to

        Edit:
        this solution is no longer relevant as we have the new ScreenSurface solution
    }
}



Screen Management & Rendering:

<Done> todo: class ScreenSurface {
    has a graphics object that we can draw to

    by putting several ScreenSurface objects in a list we get drawing layers,
    this will replace ObjectLayers 

    API Draft {

        class ScreenSurface {
            QueryList<IScreenLayer> layers;
            PGraphics ScreenSurface.graphics;

            void Draw() {
                for layers
                    ScreenSurface.graphics.beginDraw();
                    layer.Render();
                    ScreenSurface.graphics.endDraw();
            }
        }

        Interface IScreenLayer {
            void Render();
        }
    }
}


todo: Material & Shader {
    all RenderObjects shuold have a list of Materials

    a Material has a shader
    a shader deffines the properties of a Material
    the material class will be an interface to those properties

    Exsample:
    a material could have:
    - texture
    - color
    and a shader that accepts those properties

    other more specific Exsamples:
    a glow shader could have a "glowLevel" property
}


InputManager:

todo: Rewrite input system {
    the Input class (the input system encapsulator) needs to be static

    all input related classes are innerclasses of Input class
    E.g: Key, InpAxis, Mouse

    Input class use Event objects for extensibility

    can we do this without continuous Update calls?

}

